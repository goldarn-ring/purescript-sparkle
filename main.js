// Generated by psc-bundle 0.7.6.1
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };

  //- Bounded --------------------------------------------------------------------

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    /* jshint bitwise: false */
    return n === (n | 0) ? n + ".0" : n.toString();
  };

  exports.showStringImpl = function (s) {
    return JSON.stringify(s);
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Prelude"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var Show = function (show) {
      this.show = show;
  };            
  var top = function (dict) {
      return dict.top;
  }; 
  var showString = new Show($foreign.showStringImpl);
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (__dict_Show_1) {
      return new Show($foreign.showArrayImpl(show(__dict_Show_1)));
  };                                                                     
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (__dict_Applicative_2) {
      return pure(__dict_Applicative_2);
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (__dict_Functor_5) {
      return map(__dict_Functor_5);
  };
  var id = function (dict) {
      return dict.id;
  };
  var $$const = function (a) {
      return function (_3) {
          return a;
      };
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var bind = function (dict) {
      return dict.bind;
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (__dict_Apply_25) {
      return apply(__dict_Apply_25);
  };
  var liftA1 = function (__dict_Applicative_26) {
      return function (f) {
          return function (a) {
              return $less$times$greater(__dict_Applicative_26["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_26)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $less$greater = function (__dict_Semigroup_28) {
      return append(__dict_Semigroup_28);
  };
  var ap = function (__dict_Monad_30) {
      return function (f) {
          return function (a) {
              return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                  return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                      return $$return(__dict_Monad_30["__superclass_Prelude.Applicative_0"]())(_2(_1));
                  });
              });
          };
      };
  };
  exports["Show"] = Show;
  exports["Bounded"] = Bounded;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports["compose"] = compose;
  exports["const"] = $$const;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["semigroupArray"] = semigroupArray;
  exports["boundedInt"] = boundedInt;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showString"] = showString;
  exports["showArray"] = showArray;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var lift2 = function (__dict_Apply_5) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return Prelude["<*>"](__dict_Apply_5)(Prelude["<$>"](__dict_Apply_5["__superclass_Prelude.Functor_0"]())(f)(a))(b);
              };
          };
      };
  };
  exports["lift2"] = lift2;;
 
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (__dict_Show_0) {
      return new Prelude.Show(function (_13) {
          if (_13 instanceof Just) {
              return "Just (" + (Prelude.show(__dict_Show_0)(_13.value0) + ")");
          };
          if (_13 instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe line 289, column 1 - line 291, column 19: " + [ _13.constructor.name ]);
      });
  };
  var maybe = function (b) {
      return function (f) {
          return function (_0) {
              if (_0 instanceof Nothing) {
                  return b;
              };
              if (_0 instanceof Just) {
                  return f(_0.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 26, column 1 - line 27, column 1: " + [ b.constructor.name, f.constructor.name, _0.constructor.name ]);
          };
      };
  };                                                   
  var isJust = maybe(false)(Prelude["const"](true));
  var fromMaybe = function (a) {
      return maybe(a)(Prelude.id(Prelude.categoryFn));
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["isJust"] = isJust;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe"] = maybe;
  exports["showMaybe"] = showMaybe;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports._charCodeAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charCodeAt(i)) : nothing;
        };
      };
    };
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];                                          
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var contains = function (x) {
      return function (s) {
          return Data_Maybe.isJust(indexOf(x)(s));
      };
  };
  var charCodeAt = $foreign._charCodeAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["indexOf"] = indexOf;
  exports["contains"] = contains;
  exports["charCodeAt"] = charCodeAt;
  exports["length"] = $foreign.length;;
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports["regex'"] = function (s1) {
    return function (s2) {
      return new RegExp(s1, s2);
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null) {
            return nothing;
          } else {
            var list = [];
            for (var i = 0; i < m.length; i++) {
              list.push(m[i] == null ? nothing : just(m[i]));
            }
            return just(list);
          }
        };
      };
    };
  };
 
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.String.Regex"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];                                            
  var renderFlags = function (f) {
      return (function () {
          if (f.global) {
              return "g";
          };
          if (!f.global) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.global.constructor.name ]);
      })() + ((function () {
          if (f.ignoreCase) {
              return "i";
          };
          if (!f.ignoreCase) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.ignoreCase.constructor.name ]);
      })() + ((function () {
          if (f.multiline) {
              return "m";
          };
          if (!f.multiline) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.multiline.constructor.name ]);
      })() + ((function () {
          if (f.sticky) {
              return "y";
          };
          if (!f.sticky) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.sticky.constructor.name ]);
      })() + (function () {
          if (f.unicode) {
              return "u";
          };
          if (!f.unicode) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.unicode.constructor.name ]);
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](s)(renderFlags(f));
      };
  };
  var parseFlags = function (s) {
      return {
          global: Data_String.contains("g")(s), 
          ignoreCase: Data_String.contains("i")(s), 
          multiline: Data_String.contains("m")(s), 
          sticky: Data_String.contains("y")(s), 
          unicode: Data_String.contains("u")(s)
      };
  };
  var match = $foreign._match(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["match"] = match;
  exports["parseFlags"] = parseFlags;
  exports["renderFlags"] = renderFlags;
  exports["regex"] = regex;;
 
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (_5) {
          return f(_5.value0)(_5.value1);
      };
  };
  exports["Tuple"] = Tuple;
  exports["uncurry"] = uncurry;;
 
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var uncurry2 = function (f) {
      return function (_0) {
          return f(_0.value0)(_0.value1);
      };
  };
  exports["uncurry2"] = uncurry2;;
 
})(PS["Data.Tuple.Nested"] = PS["Data.Tuple.Nested"] || {});
(function(exports) {
  // module Flare
  // jshint browser: true
  // jshint node: true

  "use strict";

  function createComponent(inputType, elementCallback, eventType, eventListener) {
    return function(id) {
      return function(initial) {
        return function(send) {
          return function() {
            var el = elementCallback(initial);
            el.className = "flare-input-" + inputType;

            var div = document.createElement("div");
            div.className = "flare-input";

            if (id !== "") {
              el.id = id;
              var label = document.createElement("label");
              label.htmlFor = id;
              label.appendChild(document.createTextNode(id));
              div.appendChild(label);
            }

            div.appendChild(el);

            el.addEventListener(eventType, function(e) {
              var value = eventListener(e.target, initial);
              send(value)();
            });

            return div;
          };
        };
      };
    };
  }

  exports.cNumber = createComponent("number",
    function(initial) {
      var input = document.createElement("input");
      input.type = "number";
      input.step = "any";
      input.value = initial.toString();
      return input;
    },
    "input",
    function(t, initial) {
      var val = parseFloat(t.value);
      return (isNaN(val) ? initial : val);
    }
  );

  function clamp(min, max, initial, value) {
    if (isNaN(value)) {
      return initial;
    } else if (value < min) {
      return min;
    } else if (value > max) {
      return max;
    }
    return value;
  } 

  exports.cIntRange = function(type) {
    return function(min) {
      return function(max) {
        return createComponent("int-" + type,
          function(initial) {
            var input = document.createElement("input");
            input.type = type;
            input.min = min.toString();
            input.max = max.toString();
            input.step = "1";
            input.value = initial.toString();
            return input;
          },
          "input",
          function(t, initial) {
            return clamp(min, max, initial, parseInt(t.value, 10));
          }
        );
      };
    };
  };

  exports.cString = createComponent("string",
    function(initial) {
      var input = document.createElement("input");
      input.type = "text";
      input.value = initial;
      return input;
    },
    "input",
    function(t, initial) {
      return t.value;
    }
  );

  exports.cBoolean = createComponent("boolean",
    function(initial) {
      var input = document.createElement("input");
      input.type = "checkbox";
      input.checked = initial;
      return input;
    },
    "change",
    function(t, initial) {
      return t.checked;
    }
  );

  exports.toFieldset = function(label) {
    return function(elements) {
      var fieldset = document.createElement("fieldset");

      if (label !== "") {
        var legend = document.createElement("legend");
        legend.appendChild(document.createTextNode(label));
        fieldset.appendChild(legend);
      }

      for (var i = 0; i < elements.length; i++) {
        fieldset.appendChild(elements[i]);
      }

      return fieldset;
    };
  };

  // vim: ts=2:sw=2
 
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  // module Signal

  exports.constant =
    function constant(initial) {
      var subs = [];
      var val = initial;
      var sig = {
        subscribe: function(sub) {
          subs.push(sub);
          sub(val);
        },
        get: function() { return val; },
        set: function(newval) {
          val = newval;
          subs.forEach(function(sub) { sub(newval); });
        }
      };
      return sig;
    };

  exports.mapSigP =
    function mapSigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun(sig.get()));
          sig.subscribe(function(val) { out.set(fun(val)); });
          return out;
        };
      };
    };


  exports.applySigP =
    function applySigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun.get()(sig.get()));
          var produce = function() { out.set(fun.get()(sig.get())); };
          fun.subscribe(produce);
          sig.subscribe(produce);
          return out;
        };
      };
    };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];                 
  var mapSig = $foreign.mapSigP($foreign.constant);
  var functorSignal = new Prelude.Functor(mapSig);
  var applySig = $foreign.applySigP($foreign.constant);
  var applySignal = new Prelude.Apply(function () {
      return functorSignal;
  }, applySig);
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["runSignal"] = $foreign.runSignal;
  exports["constant"] = $foreign.constant;;
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan, v) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
 
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];     
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["send"] = send;
  exports["channel"] = channel;
  exports["subscribe"] = $foreign.subscribe;;
 
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Flare"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];     
  var Flare = (function () {
      function Flare(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Flare.create = function (value0) {
          return function (value1) {
              return new Flare(value0, value1);
          };
      };
      return Flare;
  })();
  var UI = function (x) {
      return x;
  };
  var setupFlare = function (_13) {
      return function __do() {
          var _7 = _13();
          return Prelude["return"](Control_Monad_Eff.applicativeEff)({
              components: _7.value0, 
              signal: _7.value1
          })();
      };
  };
  var functorFlare = new Prelude.Functor(function (f) {
      return function (_15) {
          return new Flare(_15.value0, Prelude.map(Signal.functorSignal)(f)(_15.value1));
      };
  });
  var functorUI = new Prelude.Functor(function (f) {
      return function (_18) {
          return UI(Prelude.map(Control_Monad_Eff.functorEff)(Prelude.map(functorFlare)(f))(_18));
      };
  });
  var fieldset = function (label) {
      return function (_9) {
          return UI(function __do() {
              var _2 = _9();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare([ $foreign.toFieldset(label)(_2.value0) ], _2.value1))();
          });
      };
  };
  var createUI = function (createComp) {
      return function (id) {
          return function ($$default) {
              return UI(function __do() {
                  var _1 = Signal_Channel.channel($$default)();
                  var _0 = createComp(id)($$default)(Signal_Channel.send(_1))();
                  return (function () {
                      var signal = Signal_Channel.subscribe(_1);
                      return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare([ _0 ], signal));
                  })()();
              });
          };
      };
  };
  var $$int = function (id) {
      return createUI($foreign.cIntRange("number")(Prelude.bottom(Prelude.boundedInt))(Prelude.top(Prelude.boundedInt)))(id);
  };                             
  var number = createUI($foreign.cNumber);
  var string = createUI($foreign.cString);
  var $$boolean = createUI($foreign.cBoolean);
  var applyFlare = new Prelude.Apply(function () {
      return functorFlare;
  }, function (_16) {
      return function (_17) {
          return new Flare(Prelude["<>"](Prelude.semigroupArray)(_16.value0)(_17.value0), Prelude["<*>"](Signal.applySignal)(_16.value1)(_17.value1));
      };
  });
  var applyUI = new Prelude.Apply(function () {
      return functorUI;
  }, function (_19) {
      return function (_20) {
          return UI(Control_Apply.lift2(Control_Monad_Eff.applyEff)(Prelude.apply(applyFlare))(_19)(_20));
      };
  });
  exports["setupFlare"] = setupFlare;
  exports["fieldset"] = fieldset;
  exports["boolean"] = $$boolean;
  exports["string"] = string;
  exports["int"] = $$int;
  exports["number"] = number;
  exports["functorFlare"] = functorFlare;
  exports["applyFlare"] = applyFlare;
  exports["functorUI"] = functorUI;
  exports["applyUI"] = applyUI;;
 
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  // module Test.FlareCheck

  exports.appendTest = function(parentId) {
    return function(title) {
      return function(elements) {
        return function() {
          var parent = document.getElementById(parentId);
          var fieldset = document.createElement("fieldset");
          fieldset.className = "flarecheck-test";
          var legend = document.createElement("legend");
          legend.innerText = title;
          fieldset.appendChild(legend);

          for (var i = 0; i < elements.length; i++) {
            fieldset.appendChild(elements[i]);
          }

          preOutput = document.createElement("pre");
          preOutput.className = "flarecheck-output";
          fieldset.appendChild(preOutput);

          parent.appendChild(fieldset);

          return preOutput;
        };
      };
    };
  };

  exports.printOutput = function(el) {
    return function(output) {
      return function() {
        el.innerHTML = output;
      };
    };
  };

  // vim: ts=2:sw=2
 
})(PS["Test.FlareCheck"] = PS["Test.FlareCheck"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Test.FlareCheck"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Signal_Channel = PS["Signal.Channel"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Signal = PS["Signal"];
  var Flare = PS["Flare"];     
  var Flammable = function (spark) {
      this.spark = spark;
  };
  var Interactive = function (createUI) {
      this.createUI = createUI;
  };
  var spark = function (dict) {
      return dict.spark;
  };
  var interactiveFunction = function (__dict_Flammable_0) {
      return function (__dict_Show_1) {
          return new Interactive(function (f) {
              return Prelude["<$>"](Flare.functorUI)(function (_13) {
                  return Prelude.show(__dict_Show_1)(f(_13));
              })(spark(__dict_Flammable_0));
          });
      };
  };
  var flammableTuple = function (__dict_Flammable_2) {
      return function (__dict_Flammable_3) {
          return new Flammable(Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)(Data_Tuple.Tuple.create)(spark(__dict_Flammable_2)))(spark(__dict_Flammable_3)));
      };
  };
  var flammableString = new Flammable(Flare.string("String")("foo"));
  var flammableNumber = new Flammable(Flare.number("Number")(3.14));
  var flammableMaybe = function (__dict_Flammable_4) {
      return new Flammable((function () {
          var toMaybe = function (_2) {
              return function (x) {
                  if (_2) {
                      return new Data_Maybe.Just(x);
                  };
                  if (!_2) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Test.FlareCheck line 50, column 11 - line 51, column 11: " + [ _2.constructor.name, x.constructor.name ]);
              };
          };
          return Flare.fieldset("Maybe")(Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)(toMaybe)(Flare["boolean"]("Just")(true)))(spark(__dict_Flammable_4)));
      })());
  };
  var flammableInt = new Flammable(Flare["int"]("Int")(1));                
  var createUI = function (dict) {
      return dict.createUI;
  };
  var flareCheck$prime = function (__dict_Interactive_7) {
      return function (parentId) {
          return function (title) {
              return function (x) {
                  var flare = createUI(__dict_Interactive_7)(x);
                  return function __do() {
                      var _1 = Flare.setupFlare(flare)();
                      var _0 = $foreign.appendTest(parentId)(title)(_1.components)();
                      return Signal.runSignal(Prelude["<$>"](Signal.functorSignal)($foreign.printOutput(_0))(_1.signal))();
                  };
              };
          };
      };
  };
  exports["Interactive"] = Interactive;
  exports["Flammable"] = Flammable;
  exports["flareCheck'"] = flareCheck$prime;
  exports["createUI"] = createUI;
  exports["spark"] = spark;
  exports["flammableNumber"] = flammableNumber;
  exports["flammableInt"] = flammableInt;
  exports["flammableString"] = flammableString;
  exports["flammableTuple"] = flammableTuple;
  exports["flammableMaybe"] = flammableMaybe;
  exports["interactiveFunction"] = interactiveFunction;;
 
})(PS["Test.FlareCheck"] = PS["Test.FlareCheck"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Flare = PS["Flare"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Test_FlareCheck = PS["Test.FlareCheck"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var TRegex = function (x) {
      return x;
  };
  var flammableTRegex = new Test_FlareCheck.Flammable(Flare.fieldset("Regex")(Prelude["<$>"](Flare.functorUI)(TRegex)(Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)(Data_String_Regex.regex)(Flare.string("Pattern")("fo+")))(Prelude["<$>"](Flare.functorUI)(Data_String_Regex.parseFlags)(Flare.string("Flags (g,i,m)")("g"))))));
  var main = function __do() {
      Test_FlareCheck["flareCheck'"](Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableString)(Prelude.showInt))("tests1")("length")(Data_String.length)();
      Test_FlareCheck["flareCheck'"](Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableTuple(Test_FlareCheck.flammableInt)(Test_FlareCheck.flammableString))(Data_Maybe.showMaybe(Prelude.showInt)))("tests1")("charCodeAt")(Data_Tuple.uncurry(Data_String.charCodeAt))();
      Test_FlareCheck["flareCheck'"](Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableTuple(Test_FlareCheck.flammableNumber)(Test_FlareCheck.flammableMaybe(Test_FlareCheck.flammableNumber)))(Prelude.showNumber))("tests1")("fromMaybe")(Data_Tuple.uncurry(Data_Maybe.fromMaybe))();
      return Test_FlareCheck["flareCheck'"](Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableTuple(flammableTRegex)(Test_FlareCheck.flammableString))(Data_Maybe.showMaybe(Prelude.showArray(Data_Maybe.showMaybe(Prelude.showString)))))("tests2")("match")(Data_Tuple_Nested.uncurry2(function (_0) {
          return function (string) {
              return Data_String_Regex.match(_0)(string);
          };
      }))();
  };
  exports["TRegex"] = TRegex;
  exports["main"] = main;
  exports["flammableTRegex"] = flammableTRegex;;
 
})(PS["Test.Main"] = PS["Test.Main"] || {});

PS["Test.Main"].main();
